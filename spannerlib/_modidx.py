# Autogenerated by nbdev

d = { 'settings': { 'branch': 'master',
                'doc_baseurl': '/spannerlib',
                'doc_host': 'https://DeanLight.github.io',
                'git_url': 'https://github.com/DeanLight/spannerlib',
                'lib_path': 'spannerlib'},
  'syms': { 'spannerlib.adding_inference_rules_to_term_graph': { 'spannerlib.adding_inference_rules_to_term_graph.AddRulesToTermGraph': ( 'adding_inference_rules_to_term_graph.html#addrulestotermgraph',
                                                                                                                                          'spannerlib/adding_inference_rules_to_term_graph.py'),
                                                                 'spannerlib.adding_inference_rules_to_term_graph.AddRulesToTermGraph.__init__': ( 'adding_inference_rules_to_term_graph.html#addrulestotermgraph.__init__',
                                                                                                                                                   'spannerlib/adding_inference_rules_to_term_graph.py'),
                                                                 'spannerlib.adding_inference_rules_to_term_graph.AddRulesToTermGraph._add_rules_to_computation_graph': ( 'adding_inference_rules_to_term_graph.html#addrulestotermgraph._add_rules_to_computation_graph',
                                                                                                                                                                          'spannerlib/adding_inference_rules_to_term_graph.py'),
                                                                 'spannerlib.adding_inference_rules_to_term_graph.AddRulesToTermGraph.run_pass': ( 'adding_inference_rules_to_term_graph.html#addrulestotermgraph.run_pass',
                                                                                                                                                   'spannerlib/adding_inference_rules_to_term_graph.py')},
            'spannerlib.banchmark.covid': { 'spannerlib.banchmark.covid.AggDocumentTags': ( 'banchmark/covid.html#aggdocumenttags',
                                                                                            'spannerlib/banchmark/covid.py'),
                                            'spannerlib.banchmark.covid.LemmaFromList': ( 'banchmark/covid.html#lemmafromlist',
                                                                                          'spannerlib/banchmark/covid.py'),
                                            'spannerlib.banchmark.covid.LemmaFromList.__call__': ( 'banchmark/covid.html#lemmafromlist.__call__',
                                                                                                   'spannerlib/banchmark/covid.py'),
                                            'spannerlib.banchmark.covid.LemmaFromList.__init__': ( 'banchmark/covid.html#lemmafromlist.__init__',
                                                                                                   'spannerlib/banchmark/covid.py'),
                                            'spannerlib.banchmark.covid.PosFromList': ( 'banchmark/covid.html#posfromlist',
                                                                                        'spannerlib/banchmark/covid.py'),
                                            'spannerlib.banchmark.covid.PosFromList.__call__': ( 'banchmark/covid.html#posfromlist.__call__',
                                                                                                 'spannerlib/banchmark/covid.py'),
                                            'spannerlib.banchmark.covid.PosFromList.__init__': ( 'banchmark/covid.html#posfromlist.__init__',
                                                                                                 'spannerlib/banchmark/covid.py'),
                                            'spannerlib.banchmark.covid.agg_mention': ( 'banchmark/covid.html#agg_mention',
                                                                                        'spannerlib/banchmark/covid.py'),
                                            'spannerlib.banchmark.covid.rewrite': ( 'banchmark/covid.html#rewrite',
                                                                                    'spannerlib/banchmark/covid.py'),
                                            'spannerlib.banchmark.covid.rewrite_docs': ( 'banchmark/covid.html#rewrite_docs',
                                                                                         'spannerlib/banchmark/covid.py'),
                                            'spannerlib.banchmark.covid.split_sentence': ( 'banchmark/covid.html#split_sentence',
                                                                                           'spannerlib/banchmark/covid.py')},
            'spannerlib.data_types': { 'spannerlib.data_types.AGGFunction': ( 'primitive_data_types.html#aggfunction',
                                                                              'spannerlib/data_types.py'),
                                       'spannerlib.data_types.FreeVar': ('primitive_data_types.html#freevar', 'spannerlib/data_types.py'),
                                       'spannerlib.data_types.FreeVar.__hash__': ( 'primitive_data_types.html#freevar.__hash__',
                                                                                   'spannerlib/data_types.py'),
                                       'spannerlib.data_types.IEFunction': ( 'primitive_data_types.html#iefunction',
                                                                             'spannerlib/data_types.py'),
                                       'spannerlib.data_types.IERelation': ( 'primitive_data_types.html#ierelation',
                                                                             'spannerlib/data_types.py'),
                                       'spannerlib.data_types.IERelation.__hash__': ( 'primitive_data_types.html#ierelation.__hash__',
                                                                                      'spannerlib/data_types.py'),
                                       'spannerlib.data_types.Relation': ('primitive_data_types.html#relation', 'spannerlib/data_types.py'),
                                       'spannerlib.data_types.RelationDefinition': ( 'primitive_data_types.html#relationdefinition',
                                                                                     'spannerlib/data_types.py'),
                                       'spannerlib.data_types.Rule': ('primitive_data_types.html#rule', 'spannerlib/data_types.py'),
                                       'spannerlib.data_types.Var': ('primitive_data_types.html#var', 'spannerlib/data_types.py'),
                                       'spannerlib.data_types.Var.__hash__': ( 'primitive_data_types.html#var.__hash__',
                                                                               'spannerlib/data_types.py'),
                                       'spannerlib.data_types._infer_relation_schema': ( 'primitive_data_types.html#_infer_relation_schema',
                                                                                         'spannerlib/data_types.py'),
                                       'spannerlib.data_types.isFloat': ('primitive_data_types.html#isfloat', 'spannerlib/data_types.py'),
                                       'spannerlib.data_types.isInt': ('primitive_data_types.html#isint', 'spannerlib/data_types.py'),
                                       'spannerlib.data_types.pretty': ('primitive_data_types.html#pretty', 'spannerlib/data_types.py')},
            'spannerlib.engine': { 'spannerlib.engine.DB': ('engine.html#db', 'spannerlib/engine.py'),
                                   'spannerlib.engine.DB.__repr__': ('engine.html#db.__repr__', 'spannerlib/engine.py'),
                                   'spannerlib.engine.Engine': ('engine.html#engine', 'spannerlib/engine.py'),
                                   'spannerlib.engine.Engine.__init__': ('engine.html#engine.__init__', 'spannerlib/engine.py'),
                                   'spannerlib.engine.Engine._inline_db_and_ies_in_graph': ( 'engine.html#engine._inline_db_and_ies_in_graph',
                                                                                             'spannerlib/engine.py'),
                                   'spannerlib.engine.Engine.add_fact': ('engine.html#engine.add_fact', 'spannerlib/engine.py'),
                                   'spannerlib.engine.Engine.add_facts': ('engine.html#engine.add_facts', 'spannerlib/engine.py'),
                                   'spannerlib.engine.Engine.add_rule': ('engine.html#engine.add_rule', 'spannerlib/engine.py'),
                                   'spannerlib.engine.Engine.del_agg_function': ( 'engine.html#engine.del_agg_function',
                                                                                  'spannerlib/engine.py'),
                                   'spannerlib.engine.Engine.del_fact': ('engine.html#engine.del_fact', 'spannerlib/engine.py'),
                                   'spannerlib.engine.Engine.del_head': ('engine.html#engine.del_head', 'spannerlib/engine.py'),
                                   'spannerlib.engine.Engine.del_ie_function': ( 'engine.html#engine.del_ie_function',
                                                                                 'spannerlib/engine.py'),
                                   'spannerlib.engine.Engine.del_relation': ('engine.html#engine.del_relation', 'spannerlib/engine.py'),
                                   'spannerlib.engine.Engine.del_rule': ('engine.html#engine.del_rule', 'spannerlib/engine.py'),
                                   'spannerlib.engine.Engine.del_var': ('engine.html#engine.del_var', 'spannerlib/engine.py'),
                                   'spannerlib.engine.Engine.execute_plan': ('engine.html#engine.execute_plan', 'spannerlib/engine.py'),
                                   'spannerlib.engine.Engine.get_agg_function': ( 'engine.html#engine.get_agg_function',
                                                                                  'spannerlib/engine.py'),
                                   'spannerlib.engine.Engine.get_ie_function': ( 'engine.html#engine.get_ie_function',
                                                                                 'spannerlib/engine.py'),
                                   'spannerlib.engine.Engine.get_relation': ('engine.html#engine.get_relation', 'spannerlib/engine.py'),
                                   'spannerlib.engine.Engine.get_var': ('engine.html#engine.get_var', 'spannerlib/engine.py'),
                                   'spannerlib.engine.Engine.plan_query': ('engine.html#engine.plan_query', 'spannerlib/engine.py'),
                                   'spannerlib.engine.Engine.run_query': ('engine.html#engine.run_query', 'spannerlib/engine.py'),
                                   'spannerlib.engine.Engine.set_agg_function': ( 'engine.html#engine.set_agg_function',
                                                                                  'spannerlib/engine.py'),
                                   'spannerlib.engine.Engine.set_ie_function': ( 'engine.html#engine.set_ie_function',
                                                                                 'spannerlib/engine.py'),
                                   'spannerlib.engine.Engine.set_relation': ('engine.html#engine.set_relation', 'spannerlib/engine.py'),
                                   'spannerlib.engine.Engine.set_var': ('engine.html#engine.set_var', 'spannerlib/engine.py'),
                                   'spannerlib.engine._collect_children_and_run': ( 'engine.html#_collect_children_and_run',
                                                                                    'spannerlib/engine.py'),
                                   'spannerlib.engine._depends_on_cycle': ('engine.html#_depends_on_cycle', 'spannerlib/engine.py'),
                                   'spannerlib.engine._in_cycle': ('engine.html#_in_cycle', 'spannerlib/engine.py'),
                                   'spannerlib.engine._pd_drop_row': ('engine.html#_pd_drop_row', 'spannerlib/engine.py'),
                                   'spannerlib.engine.compute_acyclic_node': ('engine.html#compute_acyclic_node', 'spannerlib/engine.py'),
                                   'spannerlib.engine.compute_node': ('engine.html#compute_node', 'spannerlib/engine.py'),
                                   'spannerlib.engine.compute_recursive_node': ( 'engine.html#compute_recursive_node',
                                                                                 'spannerlib/engine.py'),
                                   'spannerlib.engine.get_rel': ('engine.html#get_rel', 'spannerlib/engine.py')},
            'spannerlib.execution': {'spannerlib.execution.naive_execution': ('execution.html#naive_execution', 'spannerlib/execution.py')},
            'spannerlib.grammar': { 'spannerlib.grammar.lark_to_nx': ('spannerlog_grammar.html#lark_to_nx', 'spannerlib/grammar.py'),
                                    'spannerlib.grammar.lark_to_nx_aux': ( 'spannerlog_grammar.html#lark_to_nx_aux',
                                                                           'spannerlib/grammar.py'),
                                    'spannerlib.grammar.parse_spannerlog': ( 'spannerlog_grammar.html#parse_spannerlog',
                                                                             'spannerlib/grammar.py'),
                                    'spannerlib.grammar.reconstruct': ('spannerlog_grammar.html#reconstruct', 'spannerlib/grammar.py')},
            'spannerlib.ie_func.basic': { 'spannerlib.ie_func.basic.as_str': ( 'callbacks/basic_ies.html#as_str',
                                                                               'spannerlib/ie_func/basic.py'),
                                          'spannerlib.ie_func.basic.deconstruct_span': ( 'callbacks/basic_ies.html#deconstruct_span',
                                                                                         'spannerlib/ie_func/basic.py'),
                                          'spannerlib.ie_func.basic.expr_eval': ( 'callbacks/basic_ies.html#expr_eval',
                                                                                  'spannerlib/ie_func/basic.py'),
                                          'spannerlib.ie_func.basic.not_ie': ( 'callbacks/basic_ies.html#not_ie',
                                                                               'spannerlib/ie_func/basic.py'),
                                          'spannerlib.ie_func.basic.object_arity': ( 'callbacks/basic_ies.html#object_arity',
                                                                                     'spannerlib/ie_func/basic.py'),
                                          'spannerlib.ie_func.basic.print_ie': ( 'callbacks/basic_ies.html#print_ie',
                                                                                 'spannerlib/ie_func/basic.py'),
                                          'spannerlib.ie_func.basic.read': ('callbacks/basic_ies.html#read', 'spannerlib/ie_func/basic.py'),
                                          'spannerlib.ie_func.basic.read_span': ( 'callbacks/basic_ies.html#read_span',
                                                                                  'spannerlib/ie_func/basic.py'),
                                          'spannerlib.ie_func.basic.rgx': ('callbacks/basic_ies.html#rgx', 'spannerlib/ie_func/basic.py'),
                                          'spannerlib.ie_func.basic.rgx_is_match': ( 'callbacks/basic_ies.html#rgx_is_match',
                                                                                     'spannerlib/ie_func/basic.py'),
                                          'spannerlib.ie_func.basic.rgx_split': ( 'callbacks/basic_ies.html#rgx_split',
                                                                                  'spannerlib/ie_func/basic.py'),
                                          'spannerlib.ie_func.basic.span_arity': ( 'callbacks/basic_ies.html#span_arity',
                                                                                   'spannerlib/ie_func/basic.py'),
                                          'spannerlib.ie_func.basic.span_contained': ( 'callbacks/basic_ies.html#span_contained',
                                                                                       'spannerlib/ie_func/basic.py'),
                                          'spannerlib.ie_func.basic.str_arity': ( 'callbacks/basic_ies.html#str_arity',
                                                                                  'spannerlib/ie_func/basic.py')},
            'spannerlib.ie_func.json_path': { 'spannerlib.ie_func.json_path._parse_match': ( 'callbacks/json_path.html#_parse_match',
                                                                                             'spannerlib/ie_func/json_path.py'),
                                              'spannerlib.ie_func.json_path.json_path': ( 'callbacks/json_path.html#json_path',
                                                                                          'spannerlib/ie_func/json_path.py')},
            'spannerlib.ie_func.nlp': { 'spannerlib.ie_func.nlp._install_nlp': ( 'ie_func/nlp.html#_install_nlp',
                                                                                 'spannerlib/ie_func/nlp.py'),
                                        'spannerlib.ie_func.nlp._is_installed_java': ( 'ie_func/nlp.html#_is_installed_java',
                                                                                       'spannerlib/ie_func/nlp.py'),
                                        'spannerlib.ie_func.nlp._is_installed_nlp': ( 'ie_func/nlp.html#_is_installed_nlp',
                                                                                      'spannerlib/ie_func/nlp.py'),
                                        'spannerlib.ie_func.nlp._run_installation': ( 'ie_func/nlp.html#_run_installation',
                                                                                      'spannerlib/ie_func/nlp.py'),
                                        'spannerlib.ie_func.nlp.cleanxml_wrapper': ( 'ie_func/nlp.html#cleanxml_wrapper',
                                                                                     'spannerlib/ie_func/nlp.py'),
                                        'spannerlib.ie_func.nlp.coref_wrapper': ( 'ie_func/nlp.html#coref_wrapper',
                                                                                  'spannerlib/ie_func/nlp.py'),
                                        'spannerlib.ie_func.nlp.dependency_parse_wrapper': ( 'ie_func/nlp.html#dependency_parse_wrapper',
                                                                                             'spannerlib/ie_func/nlp.py'),
                                        'spannerlib.ie_func.nlp.download_and_install_nlp': ( 'ie_func/nlp.html#download_and_install_nlp',
                                                                                             'spannerlib/ie_func/nlp.py'),
                                        'spannerlib.ie_func.nlp.entitymentions_wrapper': ( 'ie_func/nlp.html#entitymentions_wrapper',
                                                                                           'spannerlib/ie_func/nlp.py'),
                                        'spannerlib.ie_func.nlp.kbp_wrapper': ('ie_func/nlp.html#kbp_wrapper', 'spannerlib/ie_func/nlp.py'),
                                        'spannerlib.ie_func.nlp.lemma_wrapper': ( 'ie_func/nlp.html#lemma_wrapper',
                                                                                  'spannerlib/ie_func/nlp.py'),
                                        'spannerlib.ie_func.nlp.ner_wrapper': ('ie_func/nlp.html#ner_wrapper', 'spannerlib/ie_func/nlp.py'),
                                        'spannerlib.ie_func.nlp.openie_wrapper': ( 'ie_func/nlp.html#openie_wrapper',
                                                                                   'spannerlib/ie_func/nlp.py'),
                                        'spannerlib.ie_func.nlp.parse_wrapper': ( 'ie_func/nlp.html#parse_wrapper',
                                                                                  'spannerlib/ie_func/nlp.py'),
                                        'spannerlib.ie_func.nlp.pos_wrapper': ('ie_func/nlp.html#pos_wrapper', 'spannerlib/ie_func/nlp.py'),
                                        'spannerlib.ie_func.nlp.quote_wrapper': ( 'ie_func/nlp.html#quote_wrapper',
                                                                                  'spannerlib/ie_func/nlp.py'),
                                        'spannerlib.ie_func.nlp.sentiment_wrapper': ( 'ie_func/nlp.html#sentiment_wrapper',
                                                                                      'spannerlib/ie_func/nlp.py'),
                                        'spannerlib.ie_func.nlp.ssplit_wrapper': ( 'ie_func/nlp.html#ssplit_wrapper',
                                                                                   'spannerlib/ie_func/nlp.py'),
                                        'spannerlib.ie_func.nlp.tokenize_wrapper': ( 'ie_func/nlp.html#tokenize_wrapper',
                                                                                     'spannerlib/ie_func/nlp.py'),
                                        'spannerlib.ie_func.nlp.truecase_wrapper': ( 'ie_func/nlp.html#truecase_wrapper',
                                                                                     'spannerlib/ie_func/nlp.py')},
            'spannerlib.ie_func.rust_spanner_regex': { 'spannerlib.ie_func.rust_spanner_regex._format_spanner_span_output': ( 'callbacks/rust_spanner_regex.html#_format_spanner_span_output',
                                                                                                                              'spannerlib/ie_func/rust_spanner_regex.py'),
                                                       'spannerlib.ie_func.rust_spanner_regex._format_spanner_string_output': ( 'callbacks/rust_spanner_regex.html#_format_spanner_string_output',
                                                                                                                                'spannerlib/ie_func/rust_spanner_regex.py'),
                                                       'spannerlib.ie_func.rust_spanner_regex._is_installed_package': ( 'callbacks/rust_spanner_regex.html#_is_installed_package',
                                                                                                                        'spannerlib/ie_func/rust_spanner_regex.py'),
                                                       'spannerlib.ie_func.rust_spanner_regex.download_and_install_rust_regex': ( 'callbacks/rust_spanner_regex.html#download_and_install_rust_regex',
                                                                                                                                  'spannerlib/ie_func/rust_spanner_regex.py'),
                                                       'spannerlib.ie_func.rust_spanner_regex.rgx': ( 'callbacks/rust_spanner_regex.html#rgx',
                                                                                                      'spannerlib/ie_func/rust_spanner_regex.py'),
                                                       'spannerlib.ie_func.rust_spanner_regex.rgx_span': ( 'callbacks/rust_spanner_regex.html#rgx_span',
                                                                                                           'spannerlib/ie_func/rust_spanner_regex.py'),
                                                       'spannerlib.ie_func.rust_spanner_regex.rgx_span_from_file': ( 'callbacks/rust_spanner_regex.html#rgx_span_from_file',
                                                                                                                     'spannerlib/ie_func/rust_spanner_regex.py'),
                                                       'spannerlib.ie_func.rust_spanner_regex.rgx_span_out_type': ( 'callbacks/rust_spanner_regex.html#rgx_span_out_type',
                                                                                                                    'spannerlib/ie_func/rust_spanner_regex.py'),
                                                       'spannerlib.ie_func.rust_spanner_regex.rgx_string': ( 'callbacks/rust_spanner_regex.html#rgx_string',
                                                                                                             'spannerlib/ie_func/rust_spanner_regex.py'),
                                                       'spannerlib.ie_func.rust_spanner_regex.rgx_string_from_file': ( 'callbacks/rust_spanner_regex.html#rgx_string_from_file',
                                                                                                                       'spannerlib/ie_func/rust_spanner_regex.py'),
                                                       'spannerlib.ie_func.rust_spanner_regex.rgx_string_out_type': ( 'callbacks/rust_spanner_regex.html#rgx_string_out_type',
                                                                                                                      'spannerlib/ie_func/rust_spanner_regex.py')},
            'spannerlib.magic': { 'spannerlib.magic._MagicSession': ('magic_system.html#_magicsession', 'spannerlib/magic.py'),
                                  'spannerlib.magic._MagicSession.__init__': ( 'magic_system.html#_magicsession.__init__',
                                                                               'spannerlib/magic.py'),
                                  'spannerlib.magic.clean_query_lines': ('magic_system.html#clean_query_lines', 'spannerlib/magic.py'),
                                  'spannerlib.magic.curly_brace_to_glob_var': ( 'magic_system.html#curly_brace_to_glob_var',
                                                                                'spannerlib/magic.py'),
                                  'spannerlib.magic.get_magic_session': ('magic_system.html#get_magic_session', 'spannerlib/magic.py'),
                                  'spannerlib.magic.load_ipython_extension': ( 'magic_system.html#load_ipython_extension',
                                                                               'spannerlib/magic.py'),
                                  'spannerlib.magic.parse_options': ('magic_system.html#parse_options', 'spannerlib/magic.py'),
                                  'spannerlib.magic.set_magic_session': ('magic_system.html#set_magic_session', 'spannerlib/magic.py'),
                                  'spannerlib.magic.spannerlogMagic': ('magic_system.html#spannerlogmagic', 'spannerlib/magic.py'),
                                  'spannerlib.magic.spannerlogMagic.spannerlog': ( 'magic_system.html#spannerlogmagic.spannerlog',
                                                                                   'spannerlib/magic.py')},
            'spannerlib.micro_passes': { 'spannerlib.micro_passes.CheckReservedRelationNames': ( 'micro_passes.html#checkreservedrelationnames',
                                                                                                 'spannerlib/micro_passes.py'),
                                         'spannerlib.micro_passes.CheckReservedRelationNames.__call__': ( 'micro_passes.html#checkreservedrelationnames.__call__',
                                                                                                          'spannerlib/micro_passes.py'),
                                         'spannerlib.micro_passes.CheckReservedRelationNames.__init__': ( 'micro_passes.html#checkreservedrelationnames.__init__',
                                                                                                          'spannerlib/micro_passes.py'),
                                         'spannerlib.micro_passes._check_rule_consistency': ( 'micro_passes.html#_check_rule_consistency',
                                                                                              'spannerlib/micro_passes.py'),
                                         'spannerlib.micro_passes.assignments_to_name_val_tuple': ( 'micro_passes.html#assignments_to_name_val_tuple',
                                                                                                    'spannerlib/micro_passes.py'),
                                         'spannerlib.micro_passes.check_referenced_paths_exist': ( 'micro_passes.html#check_referenced_paths_exist',
                                                                                                   'spannerlib/micro_passes.py'),
                                         'spannerlib.micro_passes.check_rule_safety': ( 'micro_passes.html#check_rule_safety',
                                                                                        'spannerlib/micro_passes.py'),
                                         'spannerlib.micro_passes.consistent_free_var_types_in_rule': ( 'micro_passes.html#consistent_free_var_types_in_rule',
                                                                                                        'spannerlib/micro_passes.py'),
                                         'spannerlib.micro_passes.convert_primitive_values_to_objects': ( 'micro_passes.html#convert_primitive_values_to_objects',
                                                                                                          'spannerlib/micro_passes.py'),
                                         'spannerlib.micro_passes.dereference_vars': ( 'micro_passes.html#dereference_vars',
                                                                                       'spannerlib/micro_passes.py'),
                                         'spannerlib.micro_passes.inline_aggregation': ( 'micro_passes.html#inline_aggregation',
                                                                                         'spannerlib/micro_passes.py'),
                                         'spannerlib.micro_passes.is_rule_safe': ( 'micro_passes.html#is_rule_safe',
                                                                                   'spannerlib/micro_passes.py'),
                                         'spannerlib.micro_passes.relations_to_dataclasses': ( 'micro_passes.html#relations_to_dataclasses',
                                                                                               'spannerlib/micro_passes.py'),
                                         'spannerlib.micro_passes.rules_to_dataclasses': ( 'micro_passes.html#rules_to_dataclasses',
                                                                                           'spannerlib/micro_passes.py'),
                                         'spannerlib.micro_passes.verify_referenced_relations_and_functions': ( 'micro_passes.html#verify_referenced_relations_and_functions',
                                                                                                                'spannerlib/micro_passes.py')},
            'spannerlib.opt': {},
            'spannerlib.optimizations_passes': { 'spannerlib.optimizations_passes.PruneUnnecessaryProjectNodes': ( 'optimizations_passes.html#pruneunnecessaryprojectnodes',
                                                                                                                   'spannerlib/optimizations_passes.py'),
                                                 'spannerlib.optimizations_passes.PruneUnnecessaryProjectNodes.__init__': ( 'optimizations_passes.html#pruneunnecessaryprojectnodes.__init__',
                                                                                                                            'spannerlib/optimizations_passes.py'),
                                                 'spannerlib.optimizations_passes.PruneUnnecessaryProjectNodes.is_input_relation_of_node_has_arity_of_one': ( 'optimizations_passes.html#pruneunnecessaryprojectnodes.is_input_relation_of_node_has_arity_of_one',
                                                                                                                                                              'spannerlib/optimizations_passes.py'),
                                                 'spannerlib.optimizations_passes.PruneUnnecessaryProjectNodes.prune_project_nodes': ( 'optimizations_passes.html#pruneunnecessaryprojectnodes.prune_project_nodes',
                                                                                                                                       'spannerlib/optimizations_passes.py'),
                                                 'spannerlib.optimizations_passes.PruneUnnecessaryProjectNodes.run_pass': ( 'optimizations_passes.html#pruneunnecessaryprojectnodes.run_pass',
                                                                                                                            'spannerlib/optimizations_passes.py'),
                                                 'spannerlib.optimizations_passes.RemoveUselessRelationsFromRule': ( 'optimizations_passes.html#removeuselessrelationsfromrule',
                                                                                                                     'spannerlib/optimizations_passes.py'),
                                                 'spannerlib.optimizations_passes.RemoveUselessRelationsFromRule.__init__': ( 'optimizations_passes.html#removeuselessrelationsfromrule.__init__',
                                                                                                                              'spannerlib/optimizations_passes.py'),
                                                 'spannerlib.optimizations_passes.RemoveUselessRelationsFromRule.remove_useless_relations': ( 'optimizations_passes.html#removeuselessrelationsfromrule.remove_useless_relations',
                                                                                                                                              'spannerlib/optimizations_passes.py'),
                                                 'spannerlib.optimizations_passes.RemoveUselessRelationsFromRule.run_pass': ( 'optimizations_passes.html#removeuselessrelationsfromrule.run_pass',
                                                                                                                              'spannerlib/optimizations_passes.py')},
            'spannerlib.ra': { 'spannerlib.ra._col_names': ('extended_ra_operations.html#_col_names', 'spannerlib/ra.py'),
                               'spannerlib.ra.assert_ie_schema': ('extended_ra_operations.html#assert_ie_schema', 'spannerlib/ra.py'),
                               'spannerlib.ra.assert_iterable': ('extended_ra_operations.html#assert_iterable', 'spannerlib/ra.py'),
                               'spannerlib.ra.coerce_tuple_like': ('extended_ra_operations.html#coerce_tuple_like', 'spannerlib/ra.py'),
                               'spannerlib.ra.difference': ('extended_ra_operations.html#difference', 'spannerlib/ra.py'),
                               'spannerlib.ra.equalColTheta': ('extended_ra_operations.html#equalcoltheta', 'spannerlib/ra.py'),
                               'spannerlib.ra.equalColTheta.__call__': ( 'extended_ra_operations.html#equalcoltheta.__call__',
                                                                         'spannerlib/ra.py'),
                               'spannerlib.ra.equalColTheta.__eq__': ( 'extended_ra_operations.html#equalcoltheta.__eq__',
                                                                       'spannerlib/ra.py'),
                               'spannerlib.ra.equalColTheta.__init__': ( 'extended_ra_operations.html#equalcoltheta.__init__',
                                                                         'spannerlib/ra.py'),
                               'spannerlib.ra.equalColTheta.__repr__': ( 'extended_ra_operations.html#equalcoltheta.__repr__',
                                                                         'spannerlib/ra.py'),
                               'spannerlib.ra.equalColTheta.__str__': ( 'extended_ra_operations.html#equalcoltheta.__str__',
                                                                        'spannerlib/ra.py'),
                               'spannerlib.ra.equalConstTheta': ('extended_ra_operations.html#equalconsttheta', 'spannerlib/ra.py'),
                               'spannerlib.ra.equalConstTheta.__call__': ( 'extended_ra_operations.html#equalconsttheta.__call__',
                                                                           'spannerlib/ra.py'),
                               'spannerlib.ra.equalConstTheta.__eq__': ( 'extended_ra_operations.html#equalconsttheta.__eq__',
                                                                         'spannerlib/ra.py'),
                               'spannerlib.ra.equalConstTheta.__init__': ( 'extended_ra_operations.html#equalconsttheta.__init__',
                                                                           'spannerlib/ra.py'),
                               'spannerlib.ra.equalConstTheta.__repr__': ( 'extended_ra_operations.html#equalconsttheta.__repr__',
                                                                           'spannerlib/ra.py'),
                               'spannerlib.ra.equalConstTheta.__str__': ( 'extended_ra_operations.html#equalconsttheta.__str__',
                                                                          'spannerlib/ra.py'),
                               'spannerlib.ra.get_const': ('extended_ra_operations.html#get_const', 'spannerlib/ra.py'),
                               'spannerlib.ra.groupby': ('extended_ra_operations.html#groupby', 'spannerlib/ra.py'),
                               'spannerlib.ra.ie_map': ('extended_ra_operations.html#ie_map', 'spannerlib/ra.py'),
                               'spannerlib.ra.intersection': ('extended_ra_operations.html#intersection', 'spannerlib/ra.py'),
                               'spannerlib.ra.is_falsy': ('extended_ra_operations.html#is_falsy', 'spannerlib/ra.py'),
                               'spannerlib.ra.is_truthy': ('extended_ra_operations.html#is_truthy', 'spannerlib/ra.py'),
                               'spannerlib.ra.join': ('extended_ra_operations.html#join', 'spannerlib/ra.py'),
                               'spannerlib.ra.map_iter': ('extended_ra_operations.html#map_iter', 'spannerlib/ra.py'),
                               'spannerlib.ra.merge_rows': ('extended_ra_operations.html#merge_rows', 'spannerlib/ra.py'),
                               'spannerlib.ra.product': ('extended_ra_operations.html#product', 'spannerlib/ra.py'),
                               'spannerlib.ra.project': ('extended_ra_operations.html#project', 'spannerlib/ra.py'),
                               'spannerlib.ra.rename': ('extended_ra_operations.html#rename', 'spannerlib/ra.py'),
                               'spannerlib.ra.select': ('extended_ra_operations.html#select', 'spannerlib/ra.py'),
                               'spannerlib.ra.union': ('extended_ra_operations.html#union', 'spannerlib/ra.py')},
            'spannerlib.session': { 'spannerlib.session.Session': ('session.html#session', 'spannerlib/session.py'),
                                    'spannerlib.session.Session.__init__': ('session.html#session.__init__', 'spannerlib/session.py'),
                                    'spannerlib.session.Session._check_semantics': ( 'session.html#session._check_semantics',
                                                                                     'spannerlib/session.py'),
                                    'spannerlib.session.Session._parse_code': ('session.html#session._parse_code', 'spannerlib/session.py'),
                                    'spannerlib.session.Session.clear': ('session.html#session.clear', 'spannerlib/session.py'),
                                    'spannerlib.session.Session.export': ('session.html#session.export', 'spannerlib/session.py'),
                                    'spannerlib.session.Session.get_all_functions': ( 'session.html#session.get_all_functions',
                                                                                      'spannerlib/session.py'),
                                    'spannerlib.session.Session.import_rel': ('session.html#session.import_rel', 'spannerlib/session.py'),
                                    'spannerlib.session.Session.import_var': ('session.html#session.import_var', 'spannerlib/session.py'),
                                    'spannerlib.session.Session.print_rules': ('session.html#session.print_rules', 'spannerlib/session.py'),
                                    'spannerlib.session.Session.register': ('session.html#session.register', 'spannerlib/session.py'),
                                    'spannerlib.session.Session.register_agg': ( 'session.html#session.register_agg',
                                                                                 'spannerlib/session.py'),
                                    'spannerlib.session.Session.remove_all_rules': ( 'session.html#session.remove_all_rules',
                                                                                     'spannerlib/session.py'),
                                    'spannerlib.session.Session.remove_head': ('session.html#session.remove_head', 'spannerlib/session.py'),
                                    'spannerlib.session.Session.remove_relation': ( 'session.html#session.remove_relation',
                                                                                    'spannerlib/session.py'),
                                    'spannerlib.session.Session.remove_rule': ('session.html#session.remove_rule', 'spannerlib/session.py'),
                                    'spannerlib.session._class_repr': ('session.html#_class_repr', 'spannerlib/session.py'),
                                    'spannerlib.session._display_result': ('session.html#_display_result', 'spannerlib/session.py'),
                                    'spannerlib.session._execute_statement': ('session.html#_execute_statement', 'spannerlib/session.py'),
                                    'spannerlib.session._format_results': ('session.html#_format_results', 'spannerlib/session.py'),
                                    'spannerlib.session._load_stdlib': ('session.html#_load_stdlib', 'spannerlib/session.py'),
                                    'spannerlib.session._sort_df': ('session.html#_sort_df', 'spannerlib/session.py'),
                                    'spannerlib.session._statement_type_and_value': ( 'session.html#_statement_type_and_value',
                                                                                      'spannerlib/session.py'),
                                    'spannerlib.session.test_session': ('session.html#test_session', 'spannerlib/session.py')},
            'spannerlib.span': { 'spannerlib.span.Span': ('spans_and_pandas.html#span', 'spannerlib/span.py'),
                                 'spannerlib.span.Span.__eq__': ('spans_and_pandas.html#span.__eq__', 'spannerlib/span.py'),
                                 'spannerlib.span.Span.__getitem__': ('spans_and_pandas.html#span.__getitem__', 'spannerlib/span.py'),
                                 'spannerlib.span.Span.__hash__': ('spans_and_pandas.html#span.__hash__', 'spannerlib/span.py'),
                                 'spannerlib.span.Span.__init__': ('spans_and_pandas.html#span.__init__', 'spannerlib/span.py'),
                                 'spannerlib.span.Span.__len__': ('spans_and_pandas.html#span.__len__', 'spannerlib/span.py'),
                                 'spannerlib.span.Span.__lt__': ('spans_and_pandas.html#span.__lt__', 'spannerlib/span.py'),
                                 'spannerlib.span.Span.__repr__': ('spans_and_pandas.html#span.__repr__', 'spannerlib/span.py'),
                                 'spannerlib.span.Span.__str__': ('spans_and_pandas.html#span.__str__', 'spannerlib/span.py'),
                                 'spannerlib.span.Span.as_str': ('spans_and_pandas.html#span.as_str', 'spannerlib/span.py'),
                                 'spannerlib.span.Span.as_tuple': ('spans_and_pandas.html#span.as_tuple', 'spannerlib/span.py'),
                                 'spannerlib.span.Span.from_val': ('spans_and_pandas.html#span.from_val', 'spannerlib/span.py'),
                                 'spannerlib.span.Span.slice': ('spans_and_pandas.html#span.slice', 'spannerlib/span.py'),
                                 'spannerlib.span.get_span_repr_format': ( 'spans_and_pandas.html#get_span_repr_format',
                                                                           'spannerlib/span.py'),
                                 'spannerlib.span.ie': ('spans_and_pandas.html#ie', 'spannerlib/span.py'),
                                 'spannerlib.span.set_span_repr_format': ( 'spans_and_pandas.html#set_span_repr_format',
                                                                           'spannerlib/span.py'),
                                 'spannerlib.span.small_hash': ('spans_and_pandas.html#small_hash', 'spannerlib/span.py')},
            'spannerlib.spannerlog_magic': { 'spannerlib.spannerlog_magic.spannerlogMagic': ( 'spannerlog_magic.html#spannerlogmagic',
                                                                                              'spannerlib/spannerlog_magic.py'),
                                             'spannerlib.spannerlog_magic.spannerlogMagic.spannerlog': ( 'spannerlog_magic.html#spannerlogmagic.spannerlog',
                                                                                                         'spannerlib/spannerlog_magic.py')},
            'spannerlib.term_graph': { 'spannerlib.term_graph._join_schema': ('term_graphs.html#_join_schema', 'spannerlib/term_graph.py'),
                                       'spannerlib.term_graph._rename_schema': ( 'term_graphs.html#_rename_schema',
                                                                                 'spannerlib/term_graph.py'),
                                       'spannerlib.term_graph.add_ie_relation': ( 'term_graphs.html#add_ie_relation',
                                                                                  'spannerlib/term_graph.py'),
                                       'spannerlib.term_graph.add_product_constants': ( 'term_graphs.html#add_product_constants',
                                                                                        'spannerlib/term_graph.py'),
                                       'spannerlib.term_graph.add_project_uniq_free_vars': ( 'term_graphs.html#add_project_uniq_free_vars',
                                                                                             'spannerlib/term_graph.py'),
                                       'spannerlib.term_graph.add_relation': ('term_graphs.html#add_relation', 'spannerlib/term_graph.py'),
                                       'spannerlib.term_graph.add_select_col_eq': ( 'term_graphs.html#add_select_col_eq',
                                                                                    'spannerlib/term_graph.py'),
                                       'spannerlib.term_graph.add_select_constants': ( 'term_graphs.html#add_select_constants',
                                                                                       'spannerlib/term_graph.py'),
                                       'spannerlib.term_graph.get_bounding_order': ( 'term_graphs.html#get_bounding_order',
                                                                                     'spannerlib/term_graph.py'),
                                       'spannerlib.term_graph.graph_compose': ( 'term_graphs.html#graph_compose',
                                                                                'spannerlib/term_graph.py'),
                                       'spannerlib.term_graph.mask_terms': ('term_graphs.html#mask_terms', 'spannerlib/term_graph.py'),
                                       'spannerlib.term_graph.merge_term_graphs': ( 'term_graphs.html#merge_term_graphs',
                                                                                    'spannerlib/term_graph.py'),
                                       'spannerlib.term_graph.merge_term_graphs_pair': ( 'term_graphs.html#merge_term_graphs_pair',
                                                                                         'spannerlib/term_graph.py'),
                                       'spannerlib.term_graph.rule_to_graph': ( 'term_graphs.html#rule_to_graph',
                                                                                'spannerlib/term_graph.py')},
            'spannerlib.tests.utils': { 'spannerlib.tests.utils.test_session': ( 'session_tests/tests_utils.html#test_session',
                                                                                 'spannerlib/tests/utils.py')},
            'spannerlib.tutorials.basic': { 'spannerlib.tutorials.basic._get_client': ( 'tutorials/basic_tasks.html#_get_client',
                                                                                        'spannerlib/tutorials/basic.py'),
                                            'spannerlib.tutorials.basic._messages_to_string': ( 'tutorials/basic_tasks.html#_messages_to_string',
                                                                                                'spannerlib/tutorials/basic.py'),
                                            'spannerlib.tutorials.basic._openai_chat': ( 'tutorials/basic_tasks.html#_openai_chat',
                                                                                         'spannerlib/tutorials/basic.py'),
                                            'spannerlib.tutorials.basic._str_to_messages': ( 'tutorials/basic_tasks.html#_str_to_messages',
                                                                                             'spannerlib/tutorials/basic.py'),
                                            'spannerlib.tutorials.basic.eq_content_spans': ( 'tutorials/basic_tasks.html#eq_content_spans',
                                                                                             'spannerlib/tutorials/basic.py'),
                                            'spannerlib.tutorials.basic.format_ie': ( 'tutorials/basic_tasks.html#format_ie',
                                                                                      'spannerlib/tutorials/basic.py'),
                                            'spannerlib.tutorials.basic.llm': ( 'tutorials/basic_tasks.html#llm',
                                                                                'spannerlib/tutorials/basic.py'),
                                            'spannerlib.tutorials.basic.span_lt': ( 'tutorials/basic_tasks.html#span_lt',
                                                                                    'spannerlib/tutorials/basic.py'),
                                            'spannerlib.tutorials.basic.split': ( 'tutorials/basic_tasks.html#split',
                                                                                  'spannerlib/tutorials/basic.py')},
            'spannerlib.tutorials.copilot': { 'spannerlib.tutorials.copilot._ast_to_string': ( 'tutorials/llm_code_documentation_example.html#_ast_to_string',
                                                                                               'spannerlib/tutorials/copilot.py'),
                                              'spannerlib.tutorials.copilot._get_character_position': ( 'tutorials/llm_code_documentation_example.html#_get_character_position',
                                                                                                        'spannerlib/tutorials/copilot.py'),
                                              'spannerlib.tutorials.copilot._get_lines': ( 'tutorials/llm_code_documentation_example.html#_get_lines',
                                                                                           'spannerlib/tutorials/copilot.py'),
                                              'spannerlib.tutorials.copilot._print_file_xml': ( 'tutorials/llm_code_documentation_example.html#_print_file_xml',
                                                                                                'spannerlib/tutorials/copilot.py'),
                                              'spannerlib.tutorials.copilot._py_to_xml': ( 'tutorials/llm_code_documentation_example.html#_py_to_xml',
                                                                                           'spannerlib/tutorials/copilot.py'),
                                              'spannerlib.tutorials.copilot._xml_to_string': ( 'tutorials/llm_code_documentation_example.html#_xml_to_string',
                                                                                               'spannerlib/tutorials/copilot.py'),
                                              'spannerlib.tutorials.copilot.ast_to_span': ( 'tutorials/llm_code_documentation_example.html#ast_to_span',
                                                                                            'spannerlib/tutorials/copilot.py'),
                                              'spannerlib.tutorials.copilot.ast_xpath': ( 'tutorials/llm_code_documentation_example.html#ast_xpath',
                                                                                          'spannerlib/tutorials/copilot.py'),
                                              'spannerlib.tutorials.copilot.lex_concat': ( 'tutorials/llm_code_documentation_example.html#lex_concat',
                                                                                           'spannerlib/tutorials/copilot.py')},
            'spannerlib.tutorials.covid': { 'spannerlib.tutorials.covid.AggDocumentTags': ( 'tutorials/rewriting_a_real_codebase.html#aggdocumenttags',
                                                                                            'spannerlib/tutorials/covid.py'),
                                            'spannerlib.tutorials.covid.LemmaFromList': ( 'tutorials/rewriting_a_real_codebase.html#lemmafromlist',
                                                                                          'spannerlib/tutorials/covid.py'),
                                            'spannerlib.tutorials.covid.LemmaFromList.__call__': ( 'tutorials/rewriting_a_real_codebase.html#lemmafromlist.__call__',
                                                                                                   'spannerlib/tutorials/covid.py'),
                                            'spannerlib.tutorials.covid.LemmaFromList.__init__': ( 'tutorials/rewriting_a_real_codebase.html#lemmafromlist.__init__',
                                                                                                   'spannerlib/tutorials/covid.py'),
                                            'spannerlib.tutorials.covid.PosFromList': ( 'tutorials/rewriting_a_real_codebase.html#posfromlist',
                                                                                        'spannerlib/tutorials/covid.py'),
                                            'spannerlib.tutorials.covid.PosFromList.__call__': ( 'tutorials/rewriting_a_real_codebase.html#posfromlist.__call__',
                                                                                                 'spannerlib/tutorials/covid.py'),
                                            'spannerlib.tutorials.covid.PosFromList.__init__': ( 'tutorials/rewriting_a_real_codebase.html#posfromlist.__init__',
                                                                                                 'spannerlib/tutorials/covid.py'),
                                            'spannerlib.tutorials.covid.agg_mention': ( 'tutorials/rewriting_a_real_codebase.html#agg_mention',
                                                                                        'spannerlib/tutorials/covid.py'),
                                            'spannerlib.tutorials.covid.rewrite': ( 'tutorials/rewriting_a_real_codebase.html#rewrite',
                                                                                    'spannerlib/tutorials/covid.py'),
                                            'spannerlib.tutorials.covid.rewrite_docs': ( 'tutorials/rewriting_a_real_codebase.html#rewrite_docs',
                                                                                         'spannerlib/tutorials/covid.py'),
                                            'spannerlib.tutorials.covid.split_sentence': ( 'tutorials/rewriting_a_real_codebase.html#split_sentence',
                                                                                           'spannerlib/tutorials/covid.py')},
            'spannerlib.tutorials.extend': { 'spannerlib.tutorials.extend.VecDB': ( 'Tutorials/extending_code.html#vecdb',
                                                                                    'spannerlib/tutorials/extend.py'),
                                             'spannerlib.tutorials.extend.VecDB.__init__': ( 'Tutorials/extending_code.html#vecdb.__init__',
                                                                                             'spannerlib/tutorials/extend.py'),
                                             'spannerlib.tutorials.extend.VecDB.add_docs': ( 'Tutorials/extending_code.html#vecdb.add_docs',
                                                                                             'spannerlib/tutorials/extend.py'),
                                             'spannerlib.tutorials.extend.VecDB.add_index': ( 'Tutorials/extending_code.html#vecdb.add_index',
                                                                                              'spannerlib/tutorials/extend.py'),
                                             'spannerlib.tutorials.extend.VecDB.search': ( 'Tutorials/extending_code.html#vecdb.search',
                                                                                           'spannerlib/tutorials/extend.py'),
                                             'spannerlib.tutorials.extend.get_openai_embeddings': ( 'Tutorials/extending_code.html#get_openai_embeddings',
                                                                                                    'spannerlib/tutorials/extend.py')},
            'spannerlib.utils': { 'spannerlib.utils.DefaultAGGs': ('utils.html#defaultaggs', 'spannerlib/utils.py'),
                                  'spannerlib.utils.DefaultAGGs.__init__': ('utils.html#defaultaggs.__init__', 'spannerlib/utils.py'),
                                  'spannerlib.utils.DefaultAGGs.add': ('utils.html#defaultaggs.add', 'spannerlib/utils.py'),
                                  'spannerlib.utils.DefaultAGGs.as_list': ('utils.html#defaultaggs.as_list', 'spannerlib/utils.py'),
                                  'spannerlib.utils.DefaultAGGs.get': ('utils.html#defaultaggs.get', 'spannerlib/utils.py'),
                                  'spannerlib.utils.DefaultAGGs.remove': ('utils.html#defaultaggs.remove', 'spannerlib/utils.py'),
                                  'spannerlib.utils.DefaultIEs': ('utils.html#defaulties', 'spannerlib/utils.py'),
                                  'spannerlib.utils.DefaultIEs.__init__': ('utils.html#defaulties.__init__', 'spannerlib/utils.py'),
                                  'spannerlib.utils.DefaultIEs.add': ('utils.html#defaulties.add', 'spannerlib/utils.py'),
                                  'spannerlib.utils.DefaultIEs.as_list': ('utils.html#defaulties.as_list', 'spannerlib/utils.py'),
                                  'spannerlib.utils.DefaultIEs.get': ('utils.html#defaulties.get', 'spannerlib/utils.py'),
                                  'spannerlib.utils.DefaultIEs.remove': ('utils.html#defaulties.remove', 'spannerlib/utils.py'),
                                  'spannerlib.utils._align_df_left': ('utils.html#_align_df_left', 'spannerlib/utils.py'),
                                  'spannerlib.utils._biggest_int_node_name': ('utils.html#_biggest_int_node_name', 'spannerlib/utils.py'),
                                  'spannerlib.utils._visualize_registration_params': ( 'utils.html#_visualize_registration_params',
                                                                                       'spannerlib/utils.py'),
                                  'spannerlib.utils._visualize_type': ('utils.html#_visualize_type', 'spannerlib/utils.py'),
                                  'spannerlib.utils.assert_df': ('utils.html#assert_df', 'spannerlib/utils.py'),
                                  'spannerlib.utils.assert_df_equals': ('utils.html#assert_df_equals', 'spannerlib/utils.py'),
                                  'spannerlib.utils.checkLogs': ('utils.html#checklogs', 'spannerlib/utils.py'),
                                  'spannerlib.utils.df_to_list': ('utils.html#df_to_list', 'spannerlib/utils.py'),
                                  'spannerlib.utils.get_base_file_path': ('utils.html#get_base_file_path', 'spannerlib/utils.py'),
                                  'spannerlib.utils.get_git_root': ('utils.html#get_git_root', 'spannerlib/utils.py'),
                                  'spannerlib.utils.get_lib_name': ('utils.html#get_lib_name', 'spannerlib/utils.py'),
                                  'spannerlib.utils.get_new_node_name': ('utils.html#get_new_node_name', 'spannerlib/utils.py'),
                                  'spannerlib.utils.is_node_in_graphs': ('utils.html#is_node_in_graphs', 'spannerlib/utils.py'),
                                  'spannerlib.utils.is_of_schema': ('utils.html#is_of_schema', 'spannerlib/utils.py'),
                                  'spannerlib.utils.kill_process_and_children': ( 'utils.html#kill_process_and_children',
                                                                                  'spannerlib/utils.py'),
                                  'spannerlib.utils.load_env': ('utils.html#load_env', 'spannerlib/utils.py'),
                                  'spannerlib.utils.patch_method': ('utils.html#patch_method', 'spannerlib/utils.py'),
                                  'spannerlib.utils.run_cli_command': ('utils.html#run_cli_command', 'spannerlib/utils.py'),
                                  'spannerlib.utils.schema_match': ('utils.html#schema_match', 'spannerlib/utils.py'),
                                  'spannerlib.utils.schema_merge': ('utils.html#schema_merge', 'spannerlib/utils.py'),
                                  'spannerlib.utils.serialize_df_values': ('utils.html#serialize_df_values', 'spannerlib/utils.py'),
                                  'spannerlib.utils.serialize_graph': ('utils.html#serialize_graph', 'spannerlib/utils.py'),
                                  'spannerlib.utils.serialize_tree': ('utils.html#serialize_tree', 'spannerlib/utils.py'),
                                  'spannerlib.utils.span_to_str': ('utils.html#span_to_str', 'spannerlib/utils.py'),
                                  'spannerlib.utils.type_merge': ('utils.html#type_merge', 'spannerlib/utils.py'),
                                  'spannerlib.utils.visualize_callback_df': ('utils.html#visualize_callback_df', 'spannerlib/utils.py')}}}
