# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/040_magic_system.ipynb.

# %% auto 0
__all__ = ['logger', 'magic_args_parser', 'parser', 'get_magic_session', 'set_magic_session', 'parse_options', 'spannerlogMagic',
           'load_ipython_extension']

# %% ../nbs/040_magic_system.ipynb 3
from typing import Optional
import logging
logger = logging.getLogger(__name__)

from pathlib import Path
import pandas as pd
from IPython.core.magic import (Magics, magics_class, line_cell_magic)
from singleton_decorator import singleton
from .utils import assert_df_equals
from .session import Session

# %% ../nbs/040_magic_system.ipynb 4
@singleton
class _MagicSession():
    def __init__(self):
        self.session = Session()

def get_magic_session():
    """Returns the session used by the magic system

    Returns:
        Session
    """    
    return _MagicSession().session

def set_magic_session(session: Session):
    """Changes the session used by the magic system to the one provided

    Args:
        session (Session): the session to use in the magic system
    """
    _MagicSession().session = session


# %% ../nbs/040_magic_system.ipynb 8
import argparse
import shlex
magic_args_parser = parser = argparse.ArgumentParser()
parser.add_argument("-o", "--output",type=str, help="write code to file")
parser.add_argument("-a", "--append",type=str, help="append code to file")

def parse_options(line):
    return magic_args_parser.parse_args(shlex.split(line))

@magics_class
class spannerlogMagic(Magics):
    @line_cell_magic
    def spannerlog(self, line: str, cell: str) -> None:
        # import locally to prevent circular import issues
        magic_session = get_magic_session()

        args = parse_options(line)

        code = cell if cell else line
        _ = magic_session.export(code,display_results=True)

        if args.output:
            out_file = Path(args.output)
            out_file.write_text(code + '\n')
            
        if args.append:
            out_file = Path(args.append)
            if not code in out_file.read_text():
                with open(out_file, "a") as f:
                    f.write(code + '\n')

def load_ipython_extension(ipython):
    ipython.register_magics(spannerlogMagic)
