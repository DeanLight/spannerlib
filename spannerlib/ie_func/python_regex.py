# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/ie_func/001_basic_ies.ipynb.

# %% auto 0
__all__ = ['PYRGX_STRING', 'PYRGX', 'AS_STRING', 'rgx', 'rgx_span', 'as_str']

# %% ../../nbs/ie_func/001_basic_ies.ipynb 3
import re
from typing import Iterable, Sequence

from ..span import Span

# %% ../../nbs/ie_func/001_basic_ies.ipynb 5
def rgx(text: str, regex_pattern: str) -> Iterable[Sequence]:
    """
    An IE function which runs regex using python's `re` and yields tuples of strings.

    @param text: The input text for the regex operation.
    @param regex_pattern: the pattern of the regex operation.
    @return: tuples of strings that represents the results.
    """
    compiled_rgx = re.compile(regex_pattern)
    num_groups = compiled_rgx.groups
    for match in re.finditer(compiled_rgx, text):
        if num_groups == 0:
            matched_strings = [match.group()]
        else:
            matched_strings = [group for group in match.groups()]
        yield matched_strings

# %% ../../nbs/ie_func/001_basic_ies.ipynb 6
PYRGX_STRING = [
    'rgx',
    rgx,
    [str, str],
    lambda output_arity: [str] * output_arity
]

# %% ../../nbs/ie_func/001_basic_ies.ipynb 8
def rgx_span(text: str, regex_pattern: str) -> Iterable[Sequence]:
    """
    An IE function which runs regex using python's `re` and yields tuples of spans.

    @param text: The input text for the regex operation.
    @param regex_pattern: the pattern of the regex operation.
    @return: tuples of spans that represents the results.
    """
    compiled_rgx = re.compile(regex_pattern)
    num_groups = compiled_rgx.groups
    if isinstance(text, Span):
        clean_text = text.as_str()
    else:
        clean_text = text
    for match in re.finditer(compiled_rgx,clean_text):
        if num_groups == 0:
            matched_spans = (Span(text,match.span()[0],match.span()[1]))
        else:
            matched_spans = [Span(text,match.span(i)[0],match.span(i)[1]) for i in range(1, num_groups + 1)]
        yield matched_spans

# %% ../../nbs/ie_func/001_basic_ies.ipynb 9
PYRGX = [
    'rgx_span',
    rgx_span,
    [str, str],
    lambda output_arity: [Span] * output_arity
]

# %% ../../nbs/ie_func/001_basic_ies.ipynb 14
def as_str(span):
    return [span.as_str()]

AS_STRING = [
    'as_str',
    as_str,
    [Span],
    [str]
]

