# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/ie_func/001_basic_ies.ipynb.

# %% auto 0
__all__ = ['PYRGX', 'AS_STRING', 'rgx', 'as_str']

# %% ../../nbs/ie_func/001_basic_ies.ipynb 3
import re
from typing import Iterable, Sequence

from ..span import Span

# %% ../../nbs/ie_func/001_basic_ies.ipynb 5
def rgx(pattern: str, text: str) -> Iterable[Sequence]:
    """
    An IE function which runs regex using python's `re` and yields tuples of strings.

    @param text: The input text for the regex operation.
    @param regex_pattern: the pattern of the regex operation.
    @return: tuples of strings that represents the results.
    """
    text = Span(text)
    compiled_rgx = re.compile(pattern)
    num_groups = compiled_rgx.groups
    if num_groups == 0:
        for match in re.finditer(compiled_rgx, str(text)):
            i,j = match.span()
            yield (text[i:j])
    else:
        for match in re.finditer(compiled_rgx, str(text)):
            indices = (match.span(i) for i in range(1,num_groups+1))
            yield tuple([text[i:j] for i,j in indices])

PYRGX =[
    'rgx',
    rgx,
    [str, str],
    lambda arity: [str]*arity
]


# %% ../../nbs/ie_func/001_basic_ies.ipynb 13
def as_str(span):
    yield str(span),

AS_STRING = [
    'as_str',
    as_str,
    [Span],
    [str]
]

