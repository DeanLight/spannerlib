# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/Callbacks/003_json_path.ipynb.

# %% auto 0
__all__ = ['json_path']

# %% ../../nbs/Callbacks/003_json_path.ipynb 4
from typing import Iterable, Tuple, Any

from jsonpath_ng import parse
import json
from ..utils import DefaultIEs,DefaultAGGs,visualize_callback_df

# %% ../../nbs/Callbacks/003_json_path.ipynb 5
def _parse_match(match: Any):
    """
    @param match: a match result of json path query.
    @return: a string that represents the match in string format.
    """
    json_result = match.value
    if type(json_result) != str:
        # we replace for the same reason as in json_path implementation.
        json_result = json.dumps(json_result).replace("\"", "'")
    return json_result

# %% ../../nbs/Callbacks/003_json_path.ipynb 6
def json_path(
        json_document: str, # The document on which we will run the path expression.
        path_expression: str # The query to execute.
    ):
    """
    Yields the matching sub-documents and the path from the document roots to the match as a tuple
    """

    json_document = json.loads(json_document.replace("'", "\""))
    jsonpath_expr = parse(path_expression)
    for match in jsonpath_expr.find(json_document):
        json_result = str(match.full_path)
        # objects in full path are separated by dots.
        yield json_result, _parse_match(match)

# %% ../../nbs/Callbacks/003_json_path.ipynb 8
DefaultIEs().add(
    'json_path',json_path,
    [str,str],
    [str,str],
)
