# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/tutorials/003_extending_code.ipynb.

# %% auto 0
__all__ = ['client', 'get_openai_embeddings', 'VecDB']

# %% ../../nbs/tutorials/003_extending_code.ipynb 4
# importing dependencies
import re
import pandas as pd
from pandas import DataFrame
from pathlib import Path
from .. import get_magic_session,Session,Span
import ast

# %% ../../nbs/tutorials/003_extending_code.ipynb 6
from .basic import llm_ie,format_ie,string_schema
from .copilot import ast_xpath,ast_to_span,lex_concat

# %% ../../nbs/tutorials/003_extending_code.ipynb 13
import faiss
import numpy as np
import openai
from collections import defaultdict
from openai import OpenAI
client = OpenAI()


def get_openai_embeddings(texts):
    response = client.embeddings.create(
        model="text-embedding-ada-002",  # or another embedding model
        input=texts
    )
    embeddings = [item.embedding for item in response.data]
    return np.array(embeddings)

# %% ../../nbs/tutorials/003_extending_code.ipynb 14
class VecDB():
    def __init__(self):
        self.index_map={}# namespace: index
        self.doc_map=defaultdict(list)# namespace: list of docs
        self.dim = 1536
    def add_index(self,namespace):
        self.index_map[namespace] = faiss.IndexFlatL2(self.dim)

    def add_docs(self,documents,namespace='default'):
        if not namespace in self.index_map:
            self.add_index(namespace)
        documents = [str(doc) for doc in documents]
        embeddings = get_openai_embeddings(documents)
        self.index_map[namespace].add(embeddings.astype('float32'))
        self.doc_map[namespace].extend(documents)

    def search(self, query, k=1,namespace='default'):
        query_embedding = get_openai_embeddings([query])[0]
        index = self.index_map[namespace]
        documents = self.doc_map[namespace]
        D, I = index.search(np.array([query_embedding]).astype('float32'), k)
        return [(documents[i], float(D[0][j])) for j, i in enumerate(I[0])]
